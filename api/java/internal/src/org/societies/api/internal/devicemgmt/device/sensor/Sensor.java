package org.societies.api.internal.devicemgmt.device.sensor;

import java.sql.Time;
import java.util.Map;

import org.societies.api.internal.devicemgmt.device.Device;


/**
 * <font color="#3f5fbf">Represents the basic sensor from which all sensors derive
 * from.</font>
 * @author rafik
 * @version 1.0
 * @created 06-déc.-2011 15:18:16
 */
public interface Sensor extends Device {

	public static final int EVENT_EVENT_RAISED = 6;
	public static final int EVENT_LOWER_THRESHOLD_REACHED = 1;
	public static final int EVENT_SENSOR_ARMED = 7;
	public static final int EVENT_STREAMING_STARTED = 3;
	public static final int EVENT_STREAMING_STOPPED = 4;
	public static final int EVENT_UPPER_THRESHOLD_REACHED = 2;
	public static final int EVENT_VALUE_CHANGED = 5;
	public static final int EVENT_VALUE_UPDATED = 0;

	/**
	 * <font color="#3f5fbf">Returns sensor measurement data. Data is encoded into a
	 * map variable by</font>
	 * <font color="#3f5fbf">a pair (key,value). Derived sensors can implement an
	 * additional method particularizing data type and method name.</font>
	 * <font color="#7f9fbf"><b>@return</b></font><font color="#3f5fbf"> Map codifying
	 * measured value. Map entries depends on implementation, but key "VALUE" is
	 * always admitted.</font>
	 */
	public Map getValue();

	/**
	 * <font color="#3f5fbf">Returns timestamp when data was measured.</font>
	 * <font color="#7f9fbf"><b>@return</b></font><font color="#3f5fbf"> Timestamp
	 * when data was measured.</font>
	 */
	public Time getValueTimestamp();

	/**
	 * <font color="#3f5fbf">Request the sensor to refresh its value, if the device is
	 * able to</font>
	 * <font color="#7f9fbf"><b>@return</b></font><font color="#3f5fbf"> Returns 0 if
	 * sucess, other value if error.</font>
	 */
	public int refreshValue();

	/**
	 * <font color="#3f5fbf">Subscribe a listener for the events generated by the
	 * sensor and the device.</font>
	 * <font color="#7f9fbf"><b>@param</b></font><font color="#3f5fbf"> listener
	 * Listener for the sensor events</font>
	 * <font color="#7f9fbf"><b>@return</b></font><font color="#3f5fbf"> Returns 0 if
	 * sucess, other value if error.</font>
	 * 
	 * @param listener
	 */
	public int registerSensorListener(SensorListener  listener);

	/**
	 * <font color="#3f5fbf">Unsubscribe a listener for the events generated by the
	 * sensor and the device.</font>
	 * <font color="#7f9fbf"><b>@param</b></font><font color="#3f5fbf"> listener
	 * Listener for the sensor events</font>
	 * <font color="#7f9fbf"><b>@return</b></font><font color="#3f5fbf"> Returns 0 if
	 * sucess, other value if error.</font>
	 * 
	 * @param listener
	 */
	public void unregisterSensorListener(SensorListener  listener);

}