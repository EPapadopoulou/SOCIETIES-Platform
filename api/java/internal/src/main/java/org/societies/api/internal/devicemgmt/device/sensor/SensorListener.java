package org.societies.api.internal.devicemgmt.device.sensor;

import org.societies.api.internal.devicemgmt.device.DeviceListener;



/**
 * <font color="#3f5fbf">Handler for the events generated by the sensor.</font>
 * @author rafik
 * @version 1.0
 * @created 06-déc.-2011 15:39:01
 */
public interface SensorListener extends DeviceListener {

	/**
	 * <font color="#3f5fbf">The sensor has detected some event, like a gas leakage or
	 * any activity</font>
	 * <font color="#3f5fbf">(for sensors implementing the EventSensorCluster).</font>
	 */
	public static final int EVENT_EVENT_RAISED = 6;
	/**
	 * <font color="#3f5fbf">The lower threshold has been reached (for sensors
	 * implementing</font>
	 * <font color="#3f5fbf">ThresholdSensorCluster).</font>
	 */
	public static final int EVENT_LOWER_THRESHOLD_REACHED = 1;
	/**
	 * <font color="#3f5fbf">The sensor has rearmed itself after an event detection
	 * (for sensors</font>
	 * <font color="#3f5fbf">implementing the EventSensorCluster).</font>
	 */
	public static final int EVENT_SENSOR_ARMED = 7;
	/**
	 * <font color="#3f5fbf">The sensor has initiated a streaming procedure (for
	 * sensors implementing</font>
	 * <font color="#3f5fbf">StreamingSensorCluster).</font>
	 */
	public static final int EVENT_STREAMING_STARTED = 3;
	/**
	 * <font color="#3f5fbf">The sensor has stopped a streaming procedure(for sensors
	 * implementing</font>
	 * <font color="#3f5fbf">StreamingSensorCluster).</font>
	 */
	public static final int EVENT_STREAMING_STOPPED = 4;
	/**
	 * <font color="#3f5fbf">The upper threshold has been reached (for sensors
	 * implementing</font>
	 * <font color="#3f5fbf">ThresholdSensorCluster).</font>
	 */
	public static final int EVENT_UPPER_THRESHOLD_REACHED = 2;
	/**
	 * <font color="#3f5fbf">The sensor value has chaged with respect to the previous
	 * stored value.</font>
	 */
	public static final int EVENT_VALUE_CHANGED = 5;
	/**
	 * <font color="#3f5fbf">Value of the sensor has been updated and can be read with
	 * getValue()</font>
	 */
	public static final int EVENT_VALUE_UPDATED = 0;

	/**
	 * <font color="#3f5fbf">This method allows sensor to notify other elements about
	 * events  triggered by the sensor.</font>
	 * <font color="#7f9fbf"><b>@param</b></font><font color="#3f5fbf"> device Device
	 * that raised the event</font>
	 * <font color="#7f9fbf"><b>@param</b></font><font color="#3f5fbf"> event event
	 * raised, coded as one of the constants defined in these</font>
	 * <font color="#3f5fbf">interface</font>
	 * 
	 * @param device
	 * @param event
	 */
	public void deviceSensorEvent(Sensor device, int event);

}