package org.societies.api.internal.sns;

import java.util.List;

public interface ISocialData {

   
    /**
     * Add a new social connector to fetch data from a specific Social network
     * @param socialConnector Interface of the specific connector
     * @throws Exception 
     */
    void addSocialConnector(ISocialConnector social) throws Exception;
    
    /**
     * Remove a social connector by his unique ID
     * @param connectorId
     * @throws Exception 
     */
    void removeSocialConnector(String connectorId) throws Exception;
    
    /**
     * Remove a social connector by his unique ID
     * @param connectorId
     * @throws Exception 
     */
    void removeSocialConnector(ISocialConnector connector) throws Exception;
    
    /**
     * Provide a list of the available social connector
     * @return List of Social Connector
     */
    List<ISocialConnector> getSocialConnectors();
    
    /**
     * Provide the list of Object that should be Casted as a OpenSocial Person
     * defined by Shindig OpenSocial Data coming from different social Networks
     * @return Object to be cast a org.apache.shindig.social.opensocial.model.Person;
     */
    List<Object> getSocialProfiles();
    
    /**
     * Provide a list of Person Object extracted from all the connectors
     * @return List of Object to be casted as org.apache.shindig.social.opensocial.model.Person;
     */
    List<Object> getSocialPeople();
    
    
    /**
     * Provide the list of activity generated by the users in the social network.
     * @return List of Object to be casted as org.apache.shindig.social.opensocial.model.ActivityEntry
     */
    List<Object> getSocialActivity();
    
    /**
     * Provide a list of Groups generated in the social network
     * @return List of Object to be casted as org.apache.shindig.social.opensocial.model.Group
     */
    List<Object> getSocialGroups();

    /**
     * Requeire the component to fetch from all active connector fetching data from the social networks
     */
    void updateSocialData();
    
    /**
     * Get last upated session
     */
    long getLastUpdate();
    
    
    /**
     * Check if the specific connector is available
     * @param connector Connetor instance
     * @return boolean
     */
    boolean isAvailable(ISocialConnector connector);
}